<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Roger&#39;s Tearoom</title>
  
  <subtitle>知行合一</subtitle>
  <link href="http://yanguwan.github.io/atom.xml" rel="self"/>
  
  <link href="http://yanguwan.github.io/"/>
  <updated>2022-06-22T13:08:13.754Z</updated>
  <id>http://yanguwan.github.io/</id>
  
  <author>
    <name>Roger</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>职场陷阱之主动做事的窘境</title>
    <link href="http://yanguwan.github.io/2022/06/22/%E8%81%8C%E5%9C%BA%E9%99%B7%E9%98%B1%E4%B9%8B%E4%B8%BB%E5%8A%A8%E5%81%9A%E4%BA%8B%E7%9A%84%E7%AA%98%E5%A2%83/"/>
    <id>http://yanguwan.github.io/2022/06/22/%E8%81%8C%E5%9C%BA%E9%99%B7%E9%98%B1%E4%B9%8B%E4%B8%BB%E5%8A%A8%E5%81%9A%E4%BA%8B%E7%9A%84%E7%AA%98%E5%A2%83/</id>
    <published>2022-06-22T07:45:33.000Z</published>
    <updated>2022-06-22T13:08:13.754Z</updated>
    
    <content type="html"><![CDATA[<p>&#x2F;Roger</p><p>《七个习惯》中第一个习惯就是积极主动，主动做事总体上当然是对的。但在职场，如果不问青红皂白地主动做事，一不小心就会落入对公司无价值，对自己更不利的窘迫境界。</p><h4 id="一个窘境案例"><a href="#一个窘境案例" class="headerlink" title="一个窘境案例"></a>一个窘境案例</h4><p>我是一个秉持积极主动信条的人。作为负责公司所有学术界和教育界事务的接口人，我总在想如何给客户和公司带来一些价值。</p><h5 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h5><p>半年前，我遇到了一个与学术界权威机构合作的机会，共同撰写一本领域内的专著。此事一来帮助权威机构引入产业界的声音，二来对公司的技术输出和品牌宣传有不错的价值。</p><p>这件事情，我相当于一位中间人和项目管理者。真正作者人选都在另外一个部门。事情拿到公司以后，大家一番讨论，觉得正好跟公司内部的写作计划可以相互重用，也认同事情的价值。于是同意写作。</p><h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><p>因为公司事务优先级的改变，另一个部门并没有真正重视这件事情，即使部门老大也没有办法。当然也有可能是出于礼貌性的支持，但根据优先级确实不能在部门内部下死命令。我尝试找过不同的人选，但都没有能够接起来。</p><p>最后的结果就是30%进度，还影响了合作单位对我们的信任，我自己的关系资源也受到伤害。期间沟通的问题这里不赘述，几次可以放下，但几次又依稀看到希望重新捡起。</p><h4 id="主动做事的陷阱和窘境"><a href="#主动做事的陷阱和窘境" class="headerlink" title="主动做事的陷阱和窘境"></a>主动做事的陷阱和窘境</h4><p>主动做事总体上来说正确的，但实际在职场中有各种因为主动做事引起的陷阱等着你。以上案例只是其中之一。</p><p>做任何事情我们都需要一个价值预期的，因为你要投入时间，还有你的合作者的时间和资源。取得价值认同一方面是为了保证你的资源，另一方面也是考验你的价值陈述是不是站得住脚。</p><h5 id="陷阱一-画大饼"><a href="#陷阱一-画大饼" class="headerlink" title="陷阱一 画大饼"></a>陷阱一 画大饼</h5><p>这个阶段不要用力过猛。经常会有人为了得到支持，会画大饼或者提供不实信息，这换句话说就是自己给自己和队友挖坑。有时候需要画饼，但一定不能过分。</p><h5 id="陷阱二-情感性认同"><a href="#陷阱二-情感性认同" class="headerlink" title="陷阱二 情感性认同"></a>陷阱二 情感性认同</h5><p>相谈甚欢，相见恨晚。美妙啊。这种事情要警惕，想想对方认同只是情绪上认同还是从长久的部门和个人利益上支持，是否容易发生改变。</p><h5 id="陷阱三-老大认同，下面不认同。"><a href="#陷阱三-老大认同，下面不认同。" class="headerlink" title="陷阱三 老大认同，下面不认同。"></a>陷阱三 老大认同，下面不认同。</h5><p>所谓老大，是你根据事情的重要性和所需资源寻找的资源级别，可能是公司老大，或者某部门老大。一般来说，下面人认同，但老大不认同，不太容易成为陷阱，因为你不会开始这件事情。但是老大认同，下面关键人员不真正认同就容易成为陷阱。</p><p>人本性上都会采用最省力原则，我拿到一把手的同意当然是效率最高的方法了，但其实这只是其中的一步。你还需要搞清楚谁是落实事情的关键人员，他们的认同同样重要。</p><h5 id="陷阱四-它会自己完成"><a href="#陷阱四-它会自己完成" class="headerlink" title="陷阱四 它会自己完成"></a>陷阱四 它会自己完成</h5><p>大概率，它不会自己完成。如果你是扔个点子或者两头撮合一下就甩手不管的人，其实事成之后你不应该拿过高的Credit,因为过程管理真的很耗神。作为主动做事的人，你要意识到每开辟一条战线，后面都有长线的投入。这个意义上讲，不要四处开花，除非你能找到信得过的代理人。</p><p>除了这些陷阱，还有哪些窘迫之处呢？</p><h5 id="窘一"><a href="#窘一" class="headerlink" title="窘一"></a>窘一</h5><p>之所以说是主动者的窘境，企业环境中，嘴上说鼓励主动性，但行为上经常并不鼓励。墙上文化和实际文化的不一致，在职场上是常态，就如同理论上的圆和你画出的圆永远不一样。主动做的事情，很少是按部就班的，一般都是新的事情，各种依赖和未知会带来很高的失败率。失败的时候，一定会有你的责任，成功的时候，功劳往往不是你的，可能是资源量投入最多的一方，也可能是台前人物。</p><h5 id="窘二"><a href="#窘二" class="headerlink" title="窘二"></a>窘二</h5><p>当你想主动做一件事，并且大声地告诉别人。那么从“势”上讲，你就变成了弱势。本来是为了公司，或者是为了大家，但现在成了你的事情。合作者就变成了帮助者，进入一种“我可以帮你，也可以不帮你“的优势地位。恋爱场上的名言，“认真你就输，主动你就败”，有几分神似。</p><h5 id="窘三"><a href="#窘三" class="headerlink" title="窘三"></a>窘三</h5><p>根据以上所述我们似乎得出不要轻易主动做一件事情，想好了，看准了，谈好了再开始的结论。但是这就落入了一种计划思维，在这个VUCA的时代，计划思维会导致平稳而平庸。有活力的组织秉持着一种迭代思维，不必过于纠结，先干再调整，fail cheaper, fail quicker。但你的企业是这种格调吗？你老fail，你能发展的好吗？窘迫不？</p><p>陷阱是可以避免的，看清楚，绕过去；窘境是无法避免，想做主动做事的人就得忍着。</p><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>最近流行一个贬义词叫精致的利己主义者，指的一切动作都是经过精心设计，围绕自我利益出发的人物。作为结束语，我反而觉的“精致的”这个词很好，在职场我们要做一名精致的主动创新者。其含义就是：</p><ul><li>我们不选择躺平或者完全的被动者，那一定导向平庸。</li><li>非必要，不主动；该主动，就主动。</li><li>避开陷阱，看准时机，忍耐窘境</li></ul><p>最后，如果你要主动做的事情，不依赖他人，就你自己足够了，那太幸福了，就开干。依赖越少，成功率越高。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&amp;#x2F;Roger&lt;/p&gt;
&lt;p&gt;《七个习惯》中第一个习惯就是积极主动，主动做事总体上当然是对的。但在职场，如果不问青红皂白地主动做事，一不小心就会落入对公司无价值，对自己更不利的窘迫境界。&lt;/p&gt;
&lt;h4 id=&quot;一个窘境案例&quot;&gt;&lt;a href=&quot;#一个窘境案例&quot; c</summary>
      
    
    
    
    <category term="工作" scheme="http://yanguwan.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="职场" scheme="http://yanguwan.github.io/tags/%E8%81%8C%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>对DB-Engines Ranking的质疑</title>
    <link href="http://yanguwan.github.io/2022/06/20/%E5%AF%B9DB-Engines-Ranking%E7%9A%84%E8%B4%A8%E7%96%91/"/>
    <id>http://yanguwan.github.io/2022/06/20/%E5%AF%B9DB-Engines-Ranking%E7%9A%84%E8%B4%A8%E7%96%91/</id>
    <published>2022-06-20T14:15:01.000Z</published>
    <updated>2022-06-20T14:16:03.113Z</updated>
    
    <content type="html"><![CDATA[<p>DB-Engines Ranking被全球数据库人士频繁引用，同时也被当成是最权威的数据库流行度排名榜单之一。我想这个权威可能来自于几个因素。第一历史悠久,DB-Engines 2012年开始排榜，每月更新。第二数据比较全面。<br>今天我想对DB-Engines Ranging做个小的质疑。主要是两个原因，第一、这个榜单排名算法没有公开。只给了一个模糊的说明。对一切黑箱的东西，都是可以质疑一下的。第二、排名结果跟直观感受不一致。</p><h3 id="排名算法不公开"><a href="#排名算法不公开" class="headerlink" title="排名算法不公开"></a>排名算法不公开</h3><p>这个排行榜的全称是数据库流行度排行榜， Popularity Ranking。根据DB-Engines的模糊说明，目前主要考虑了：</p><ul><li>数据库在Google和Bing中提及到次数。</li><li>作为大众感兴趣程度的体现，引入了Google Trends中某数据库被搜索的次数。</li><li>技术论坛Stack Overflow和DBA Stack Exchange中被问到和回答的次数。</li><li>在Simply Hire和Indeed中招聘岗位中提及的次数。</li><li>在Linkedin中作为专业人士档案技能提及到的次数。</li><li>在Twitter中被提及到次数。</li></ul><p>其中没有包含安装量。作为衡量流行度Popularity，以上的说明中包含的因素，除了对移动互联网考虑不足以及数据源比较偏美国的之外，总体上来说还是可以的。之所以说这是个模糊的说明，主要是其中既没有各个数据源的权重说明，也没有数据时间范围的说明，是任意时间段还是最近若干年等。</p><h3 id="排名结果与直观印象不符"><a href="#排名结果与直观印象不符" class="headerlink" title="排名结果与直观印象不符"></a>排名结果与直观印象不符</h3><p>我们看一下最近2022年6月的关系型数据库排名<br><img src="https://pica.zhimg.com/80/v2-b77aead5287b2600e4bfcefe3a291b37_720w.png?source=d16d100b" alt="2022年6月DB-Engines关系型数据排名前20"></p><p>我们注意到Oracle的分数是最近快速蹿升大红大紫的Snowflake的13倍，是第16名Spark的26倍。这跟你的直观印象一致吗？每1个人关注databricks，就有26个人关注Oracle？每问一个TiDB相关的问题，就有 400 个Oracle的问题问出？<br>Oracle的分数可能被高估了</p><h3 id="鸟瞰一下数据"><a href="#鸟瞰一下数据" class="headerlink" title="鸟瞰一下数据"></a>鸟瞰一下数据</h3><p>时间有限，没有爬说明中的所有网站，而是选了同类的代表。选了Google，Google Trends，Stack Overflow，Simply Hire，没有看twiter。数据做了同比例缩放。因为这是Populairty，明确选择了12个月内的数据，而不是所有时间段，这样免去一些产品的 legacy 误差。</p><p><img src="https://pic2.zhimg.com/80/v2-74d2905c750190edbfa263c09a67cd93_720w.png?source=d16d100b" alt="8款关系型数据库的四个维度数据"></p><p>图中根据DB-Engines的分值从高到低，选择了款老中青三代数据库。画个曲线<br><img src="https://pic3.zhimg.com/80/v2-00e37641842b13b09d90802c9bf67ca7_720w.png?source=d16d100b" alt="8款产品的四个维度对比"></p><p>首先奇怪的是MySQL除了Google得分比Oracle低，其他得分都大幅领先Oracle，最后得分反而比Oracle低很多。为什么？</p><h3 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h3><p>网上抄两句Python代码，回归推算一下每个维度的权重。</p><blockquote><p>filename&#x3D;’dbeng.csv’<br>df &#x3D; pd.read_csv(filename)<br>x &#x3D; np.array(df.iloc[:,1:5].values)<br>y &#x3D; np.array(df.iloc[:,5].values)<br>cft &#x3D; linear_model.LinearRegression()<br>cft.fit(x,y)<br>print(“model coeeficients”,cft.coef_)<br>print(“model intercept”,cft.intercept_)</p></blockquote><p>结果</p><blockquote><p>model coeeficients [ 6.52852337 1.79811976 2.92829948 -1.45595674]<br>model intercept -5.20967181788734</p></blockquote><p>也就是说为了回归出目前DB-Engines的分数，Simply Hire的权重变成负值了。这个显然是错误的。Simply Hire 标志着该数据库相关岗位，初步估计与Stack Over Flow 类似重要，拍脑袋给个 1.0 的权重。那么公式变为：</p><blockquote><p>DB-Engines score &#x3D; 6.52852337\times Google + 1.79811976\times Google Trends + 2.92829948\times Stack Overflow +1 \times Simply Hire</p></blockquote><h3 id="新的排名（"><a href="#新的排名（" class="headerlink" title="新的排名（^-^)"></a>新的排名（^-^)</h3><p><img src="https://pic2.zhimg.com/80/v2-3532820af43a75c29ec19fe072fec15d_720w.png?source=d16d100b" alt="新的排名根据更新过的公式"><br>新的排名根据更新过的公式</p><p>看我们自己也可以做个排名算法了^-^。 而且跟直观印象更加一致。比如，MySQL的Popularity显然高于Oracle，不然开源做了这么多年，开源更容易被大量的用户采用以及更多的从业人员的优势哪里去了？Oracle的流行度大概是Snowflake的2倍， Databricks的3倍更加符合目前的常识。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;DB-Engines Ranking被全球数据库人士频繁引用，同时也被当成是最权威的数据库流行度排名榜单之一。我想这个权威可能来自于几个因素。第一历史悠久,DB-Engines 2012年开始排榜，每月更新。第二数据比较全面。&lt;br&gt;今天我想对DB-Engines Rang</summary>
      
    
    
    
    <category term="工作" scheme="http://yanguwan.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="Distributed Database" scheme="http://yanguwan.github.io/tags/Distributed-Database/"/>
    
    <category term="TiDB" scheme="http://yanguwan.github.io/tags/TiDB/"/>
    
    <category term="DB-Engines" scheme="http://yanguwan.github.io/tags/DB-Engines/"/>
    
  </entry>
  
  <entry>
    <title>一个叫Talent Plan的学习社区</title>
    <link href="http://yanguwan.github.io/2022/06/18/%E4%B8%80%E4%B8%AA%E5%8F%ABTalent-Plan%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%A4%BE%E5%8C%BA/"/>
    <id>http://yanguwan.github.io/2022/06/18/%E4%B8%80%E4%B8%AA%E5%8F%ABTalent-Plan%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%A4%BE%E5%8C%BA/</id>
    <published>2022-06-18T11:18:58.000Z</published>
    <updated>2022-06-18T11:20:07.190Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Talent-Plan-课程"><a href="#Talent-Plan-课程" class="headerlink" title="Talent Plan 课程"></a>Talent Plan 课程</h3><p>刚到公司的时候，实话讲没有注意到这个Talent Plan，一来觉得这就是一门课程而已，二来被这个普通的名字迷惑了。后来才意识到这是一个很有意思的事情。</p><h3 id="数据库开发人才培养面临的矛盾"><a href="#数据库开发人才培养面临的矛盾" class="headerlink" title="数据库开发人才培养面临的矛盾"></a>数据库开发人才培养面临的矛盾</h3><p>关于数据库开发人才短缺的问题，大家都知道短缺，但到底有多严重，做个简单的计算。国内1243所本科高校中，对本科生开设数据库内核实现课程的高校，不超过20所，算上研究生开设内核开发实现的高校，加起来不超过60所。涉及到数据库内核实现的部分，不同高校的设置不一样，但都在这几个专业之中，</p><ul><li>计算机专业（080901）</li><li>或者软件工程（080902）</li><li>数据计算及应用（070104T）</li><li>数据科学与大数据技术（080910T）</li></ul><p>以上四个大专业，一般一所高校一年的学生量是400人，其中主要学习数据库开发的不足三分之一。研究生中，从事数据库内核实现会分布在不同的实验室，但一所学校加起来不足50人。满打满算，一年只有204000.3+60*50，约为5400名毕业生。</p><p>再看需求，墨天轮上列出的国产数据库企业是150家左右。假设每家企业每年的人才需求是30人，包括研发、测试、产品经理等，那么看得见的数据库开发人才缺口就是每年4500人，还有很多企业不在榜上，估计每年6000人。除了DB厂商，每个DB企业都有自己的合作伙伴和客户，这些企业也需要基于数据库，开发自己的数据库应用或者开发自己的定制数据库。按照10:1估计，这些生态企业总共需要6万人。 5400比66000的矛盾。此处不包括大数据分析侧的人才状态，大数据技术平台的人才供给矛盾稍显缓和。有人可能会说，我们可以招聘学习分布式计算或者分布式存储等密切相关方向的学生，即使如此，也不能明显缓和这个矛盾。</p><p>造成这个人才短缺的原因，其中之一是数据库内核开发人才的学习路径比较长。除了作为开发者必学的离散数学，数据结构、语言，作为基础软件开发者，你还需要学习计算系系统架构、编译原理、操作系统，作为数据库开发者，继续学习数据库概述、数据库实现、分布式存储和计算等等。面对这么长的路径，做一个移动应用或上层应用开发者路径就简单的多，可以速成。再加上近10年应用开发需求的极速膨胀，可以消化掉巨量的人才供给。这导致了数据库内核等基础软件方向招生困难。</p><p>从高校专业设置的角度，数据库不是一个专业，而只是计算机专业或者软件工程专业下的一个方向，再加上数据库在高校的眼中是一个非常传统的，成熟的技术，相比人工智能等新潮的技术方向，不太容易产出学术成果，导致过去二十年，绝大多数高校的本科数据库课程设置，都依然停留在数据库的使用和运维基础之上。这也跟过去二十年，我们主要使用美国企业的数据库产品（Oracle，DB2， MySQL， PostgreSQL，并不开发自己的数据库的情况也相关。</p><p>随着中国互联网产业的兴起，带动了自研数据库和国产数据库的发展。墨天轮中的150家国产数据库企业绝大多数都是2010年之后出现的。中国互联网经济的成功不但带来了大量的数据库开发需求，也推动了数据库技术的新发展， NoSQL， NewSQL， HTAP等技术相继出现。</p><p>但就在产业界对数据库开发人才无论是数量上，还是质量上提出要求的时候，令人尴尬的是，高校在数量上和质量上并没有准备好。</p><p>在这个矛盾中，最尖锐的部分是分布式关系型数据库开发人才的短缺。本来设置数据库开发教学的学校就不多，将分布式数据库的实现作为重点的就更少了，然而产业界数据库最主流的发展和需求就集中在分布式关系型数据库领域。</p><h3 id="Talent-Plan"><a href="#Talent-Plan" class="headerlink" title="Talent Plan"></a>Talent Plan</h3><p><a href="http://tidb.net/talent-plan">Talent Plan</a> 是公司几位创始成员在2018 年启动的。在看到美国学术界的人士都有不亚于工业界的工程能力，他们颇受触动，随即回国后开发了这套帮助学生学习和上手实操分布式数据内核开发的开源课程。</p><p>创始人们在2018年估计也不一定意识到人才短缺的宏观情况。他们起初希望与高校合作科研，将高校的研究成果应用到自己的产品上，然而高校实验室的人员对分布式数据库的了解并不足够，所以开发了Talent Plan。</p><p>之后的发展是轨迹有点超出了最早的构想。除了第一批的华中科技和中国科大，来自于200多所高校的学生学习Talent Plan，包括40所国外高校，在<a href="https://github.com/pingcap/talent-plan">GitHub</a>上达到 7600+星，学习人数也达到3000+人。</p><h3 id="开源学习社区"><a href="#开源学习社区" class="headerlink" title="开源学习社区"></a>开源学习社区</h3><p>开源学习社区当然属于开源社区，但同一般围绕一款软件进行协作开发的社区，学习社区有显著的不同。学习社区主要围绕学习活动，一切制度和资源配置都是围绕学习。比如学习社区中，除了一般社区的Contributor,Committer等角色，还必须有Mentors，必须有学习活动的组织者。将一款正在快速的迭代的开源软件作为学习者学习的对象，也不是最合适的选择。较好的学习对象应该是稳定的版本，并围绕开源软件衍生出的课程，包括理论知识、实操练习和编程实践。</p><p>开源学习社区还有几个特点和作用。第一，打破了学校的围墙。不再是优秀的学习资源只属于某个学校，而是惠及更多的人。第二、突破了对学校老师的依赖或者制约。大家知道高校的发展激励并不支持老师花费很多时间深入开源软件代码中，从而真正把产业界领先的设计和实践引入学校。学习社区可以通过Mentors机制把从产业界和教育界真正了解特定领域的知识导入到社区中。</p><p>Talent Plan 学习社区就是一个专注在数据库、分布式存储和系统领域的开源实践学习社区。</p><p>最后<br><a href="https://tidb.io/talent-plan">Talent Plan 中文官网</a><br><a href="https://github.com/pingcap/talent-plan">Talent Plan Github Home Page</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Talent-Plan-课程&quot;&gt;&lt;a href=&quot;#Talent-Plan-课程&quot; class=&quot;headerlink&quot; title=&quot;Talent Plan 课程&quot;&gt;&lt;/a&gt;Talent Plan 课程&lt;/h3&gt;&lt;p&gt;刚到公司的时候，实话讲没有注意到这个Tale</summary>
      
    
    
    
    
    <category term="Talent Plan" scheme="http://yanguwan.github.io/tags/Talent-Plan/"/>
    
    <category term="Distributed Database" scheme="http://yanguwan.github.io/tags/Distributed-Database/"/>
    
    <category term="Distributed System" scheme="http://yanguwan.github.io/tags/Distributed-System/"/>
    
    <category term="TiDB" scheme="http://yanguwan.github.io/tags/TiDB/"/>
    
  </entry>
  
  <entry>
    <title>读黄仁宇《万历十五年》</title>
    <link href="http://yanguwan.github.io/2022/05/23/%E8%AF%BB%E9%BB%84%E4%BB%81%E5%AE%87%E3%80%8A%E4%B8%87%E5%8E%86%E5%8D%81%E4%BA%94%E5%B9%B4%E3%80%8B/"/>
    <id>http://yanguwan.github.io/2022/05/23/%E8%AF%BB%E9%BB%84%E4%BB%81%E5%AE%87%E3%80%8A%E4%B8%87%E5%8E%86%E5%8D%81%E4%BA%94%E5%B9%B4%E3%80%8B/</id>
    <published>2022-05-23T13:57:22.000Z</published>
    <updated>2022-05-23T14:22:08.208Z</updated>
    
    <content type="html"><![CDATA[<p>看完李录《文明、现代化、价值投资与中国》，希望进一步了解中国为什么在明清两代错失资本主义，将起于隋代，顶峰于宋的东方领先在两三百年之内全面葬送。</p><p>李录着重谈了起源于1215年的英国《大宪章》形成的有限政府、新大陆的发现、文艺复兴和宗教改革带来的新教等几个因素，在环大西洋形成了一个以商业为中心的环境，商业发展进一步带来了资本、科学和技术、企业等必要的支撑条件，这些支撑条件各自的发展又带来商业的进一步发展。几次迭代之后就形成了完全领先于东方农业文明的工业文明。</p><p>成书于上世纪七八十年代的《万历十五年》本意是从大历史观的角度看明朝衰败的转折点，黄仁宇先生给此书的另一个名字是《明朝大失败总记录》，然而恰恰我认为这个万历十五年（1587）是中国历史的转折点，既中国失去抓住资本主义发展的时机，而是沿着封建集权的农业社会发展下去，直到被列强打醒。 1587的这个年份，也很有意思，正是西班牙舰队征英的前一年；努尔哈赤建州女真起于白山黑水之间的年份。</p><p>从分析东方为什么失败这一点上，当然《万历》一书更加细致。全书以一种电影旁白的口吻叙述了最有代表性的几个人物，皇帝万历、首辅张居正、申时行、清官海瑞、将领戚继光、思想家李贽等的所思所想所为，并借此讨论了明朝的各项制度是如何地，不以人的意志为转移地，将本朝导向到毁灭的。</p><p>从政治权力格局角度主要有皇权、文官集团、武官集团。农民阶级从未形成有效的组织，工商业还太小也没有形成自己的话语权。虽然明清两代中央集团更为严重，相权从体制上被完全取消，但其实在皇权、宦官、文官集团、武官集团三者之间（宦官是皇帝用于平衡文官集团的工具），居于主导地位的恰是帝国两万名官员组成的文官集团，他们内部盘根错节，圈子同门，又同尊孔孟，程朱理学。对外他们一方面以成宪为名，限制皇帝的各种行为和思想，乖皇帝在文官集团笔下往往是最好的皇帝，而戳穿他们并且不太配合的皇帝则被文官写成了荒淫无度甚至神志不清的人设，比如明正德皇帝。另一方面他们主导武官集团的选人，将标准限定为有勇而无谋，与皇权一起将武官集团作为基层苦力使用。</p><p>从来没有皇帝一人可以控制所有人的，皇帝其实也是权力的代理人，他只不过代理的权力大一些。他也要依赖别的权力代理人来管理整个国家，否则轻则事情不成，重则可能自己位置和性命不保。</p><p>为了以一人之力统治全国，皇帝格外注意使用道德教化，于是儒术盛行，告知天下人要以忠为大；并且格外注意礼术的使用，礼包含了流程和仪式感带来的信念的强化作用。</p><p>历史掌握在文官集团手上，对任何人的功过评价，宣传褒贬都掌握在他们手上，于是形成特有激励文化，比如直接骂皇帝，最好被处死，这样可以青史留名。对此皇帝也没有办法，面对经常的一些讪君卖直，万历选择了消极抵抗，不让你得逞（主要因为立储的争执）。然而这种对抗导致帝国几十年中枢神经几乎停止工作，老官员辞任，新人不补，官员没有晋升。万历选择的消极应对，使忠于职守者失去信心，使贪污腐败有机可乘，整个帝国逐渐走向崩溃。</p><p>“名义上他是天子，实际上受制于廷臣。万历皇帝以他的聪明接触到了事情的真相，明白了自己立常洵的计划不能成功，就心灰意懒，对这个操纵实际的官僚集团日益疏远，采取了长期怠工的消极对抗。”</p><p>总的来说，帝国以道德教化和礼术为主要统治方法，只追求不让百姓受饥寒之苦，四方平静不要出大乱子为最高目标。并没有生产效率和商业的概念，更谈不上发展经济了。发展商业有一个非常重要的前提是私有产权的保护，文官集团作为地主阶级的代表，并不愿意给与地主阶级之外任何阶层的权利保护，以防不利于帝国的统治。整个统治阶级都是如此。这样一个读书人，如果不能入仕，则很难发挥他的才干，也很难带给家人和族人以荣誉和物资回报。</p><p>“大小臣僚希望他以德行而非权力对国家做出贡献。然后德行又是什么呢？” 德行不就会木偶吗？</p><p>“万历皇帝连续三十多年不出紫禁城”，变成了活着的祖宗。</p><p>申时行被称为和稀泥的好手。其实他洞察帝国管理的秘诀，像张居正那样依赖个人能力和际遇，做到一人之力驱使整个文官集团，实行与文官集团利益对立的改革，终究难以获得成功。皇权和文官集团都不愿意设定一个限制自己的法律，而是选择以道德力量来灵活管理帝国。申首辅虽然被文官集团诟病和稀泥，但着实做成了不少事情，也取得了皇帝的信任，并且善始善终。</p><p>而另一位著名官员海瑞因为上书痛骂万历的爷爷嘉靖（骂其是个愚蠢、自私、残忍虚荣的皇帝）而入狱，从而在文官集团中获得了崇高的道德力量。海瑞是申时行做法的另一面，他高度重视法律并且刚正不阿。海瑞一心恢复洪武初年的法律制度，朱元璋创始明朝时，树立了打击官僚、缙绅、地方高级人士，保护农民的法律制度。这跟朱重八个人的经历高度相关。这个制度在明初符合生产力发展要求，释放农民的生产积极性，但并不能发挥工商业者的发展述求。海瑞跟其他官员一样不会考虑什么生产力的发展，海瑞的固执和清明惹得文官集团对之敬而远之。海瑞没有向申时行那样看透这个帝国的运转机制，“以不怕死的诤谏换来的名声作为资本，而要使整个社会机器停止转动，最后落了个“志大才疏”的评语”。对比申时行和海瑞的结局就能看到，在那个环境中，和稀泥比刚正不阿来的更加“正确”。</p><p>与海瑞同时代还有一名鼎鼎大名的抗倭名将戚继光。我们可能熟悉戚继光在选人带人、战斗阵型兵器等各方面的创举，以及他在东南沿海的全胜战绩。另外还有一点值得注意的，戚继光为什么在那个武官受排挤，且政治军事下行的环境下能够取得辉煌的成绩，与他的务实有关。戚将军懂得在一个资源受限的环境中做事的方法，他不像同时期的另一名名将俞大猷（you），俞希望朝廷建立新军，而戚继光着眼实际从农户中招兵，用竹竿造狼铣，发明鸳鸯阵，严明军纪，最终打造出一支战斗力超强的戚家军。</p><p>同时戚继光能写文章，被文官集团当成自己人，其中张居正对戚继光十分支持。当然戚继光也主动投靠成为张居正的人（戚继光曾经购买美女送给张，戚的恩师谭纶送房中术给张），这也注定最终张倒台后，戚的下场比较凄凉。</p><p>“在抗倭战争中功勋卓著的戚继光不是在理想上把事情做得至善至美的将领，而是最能适应环境以发挥他的天才的将领。他所以获得成功的要点，在于他清醒的现实感。他看清并适应了当时的政治，而把军事技术作为必要的辅助，这是在当时的环境里唯一可以被允许的方案。至于在一个以文人治国的农业国家里，谁要想极端强调军事效率，提倡技术的发展，而导致军人和文官并驾齐驱，哪怕他能举出无数动听的理由，在事实上也是绝对办不到的。”</p><p>“帝国的官僚政治已经发展到登峰造极，成千上万的官僚，在维护成宪的名义下保持各方面的平衡，掩盖自己不可告人的私利。”</p><p>“写历史的人既知道戚继光是一代卓越的将领，一位极端果敢刚毅的军人，也是第一流的经理、组织家、工程建筑师和操典的作者，则自然应该联想到假如他不精通政治间的奥妙，就绝不可能同时做好这么多的事情。” 戚继光懂得妥协，正奇两用，虽然《明史》评价戚继光（相比于俞大猷）“操行不如但果毅过人”，但戚继光没有把他的手段用在坏的目标上，全部是为了组建军队打胜倭寇和关外女真人。戚继光将军依然配得上后人的崇拜。然而精通政治的戚继光还是犯了一个大错（也许为了成事顾不了自己太多了），既他的能武与张居正的能文走的太近，他们的组合没有造反的意愿但具备造反的能力，所以结局不能够好。戚继光死后三十年，当明军与努尔哈赤交锋时，没有了戚继光，全线败退。</p><p>对姚安知府李贽没有太多要评价的。不解黄仁宇先生为什么不写王阳明的弟子，比如龙溪先生王畿，或者1587 年被万历贬官的顾宪成（后来开创了大名鼎鼎的东林党）。</p><p>除了《明朝大失败总记录》这个角度，还有人把这本书当成一本官场生存手册，比如在电视剧《人民的名义》中，省政法委书记高育良多次提到此书。其实也对，这本书通过不同的官场人物，分别采取了不同的为官之道，也有了不同的结局，从功能上对官员自然有启发意义。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;看完李录《文明、现代化、价值投资与中国》，希望进一步了解中国为什么在明清两代错失资本主义，将起于隋代，顶峰于宋的东方领先在两三百年之内全面葬送。&lt;/p&gt;
&lt;p&gt;李录着重谈了起源于1215年的英国《大宪章》形成的有限政府、新大陆的发现、文艺复兴和宗教改革带来的新教等几个因素，</summary>
      
    
    
    
    <category term="读书" scheme="http://yanguwan.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
    <category term="读书与职场" scheme="http://yanguwan.github.io/tags/%E8%AF%BB%E4%B9%A6%E4%B8%8E%E8%81%8C%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>firstpost</title>
    <link href="http://yanguwan.github.io/2022/05/22/firstpost/"/>
    <id>http://yanguwan.github.io/2022/05/22/firstpost/</id>
    <published>2022-05-22T13:41:01.000Z</published>
    <updated>2022-05-23T13:52:26.978Z</updated>
    
    <content type="html"><![CDATA[<p>今天建立了一个Github个人主页，将来就在这里记录一些所思所想吧。</p><p>感谢Github, 感谢Hexo</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天建立了一个Github个人主页，将来就在这里记录一些所思所想吧。&lt;/p&gt;
&lt;p&gt;感谢Github, 感谢Hexo&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="读书与人生" scheme="http://yanguwan.github.io/tags/%E8%AF%BB%E4%B9%A6%E4%B8%8E%E4%BA%BA%E7%94%9F/"/>
    
    <category term="Tennis" scheme="http://yanguwan.github.io/tags/Tennis/"/>
    
  </entry>
  
</feed>
